"""
·ª®ng d·ª•ng FinSight AI - Phi√™n b·∫£n ƒë∆°n gi·∫£n
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import os
import sys

# Th√™m th∆∞ m·ª•c src v√†o path
sys.path.append('src')

# Import c√°c module c∆° b·∫£n
try:
    from data_processing import FinancialDataProcessor
    from visualization import FinancialVisualizer
except ImportError as e:
    st.error(f"L·ªói import module: {e}")
    st.stop()

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="FinSight AI - Qu·∫£n L√Ω v√† D·ª± B√°o T√†i Ch√≠nh",
    page_icon="üìä",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
</style>
""", unsafe_allow_html=True)

def load_data():
    """T·∫£i d·ªØ li·ªáu"""
    try:
        # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        if os.path.exists('data/processed/financial_statements_processed.csv'):
            df = pd.read_csv('data/processed/financial_statements_processed.csv')
            st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu: {len(df)} b·∫£n ghi")
            return df
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
            return None
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return None

def show_dashboard(df):
    """Hi·ªÉn th·ªã dashboard ch√≠nh"""
    st.markdown('<h1 class="main-header">üìä FinSight AI</h1>', unsafe_allow_html=True)
    st.markdown('<h2 style="text-align: center; color: #666;">Qu·∫£n L√Ω v√† D·ª± B√°o T√†i Ch√≠nh Doanh Nghi·ªáp</h2>', unsafe_allow_html=True)
    
    # Th·ªëng k√™ t·ªïng quan
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üè¢ T·ªïng s·ªë c√¥ng ty", len(df['Company'].unique()))
    
    with col2:
        st.metric("üìä T·ªïng s·ªë b·∫£n ghi", len(df))
    
    with col3:
        if 'Date' in df.columns:
            date_range = f"{df['Date'].min()[:7]} - {df['Date'].max()[:7]}"
            st.metric("üìÖ Kho·∫£ng th·ªùi gian", date_range)
    
    with col4:
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        st.metric("üìà S·ªë ch·ªâ s·ªë", len(numeric_cols))
    
    # Sidebar
    with st.sidebar:
        st.header("üéõÔ∏è ƒêi·ªÅu khi·ªÉn")
        
        # Ch·ªçn c√¥ng ty
        companies = df['Company'].unique()
        selected_company = st.selectbox("Ch·ªçn c√¥ng ty:", companies)
        
        # Ch·ªçn ch·ªâ s·ªë
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        selected_metrics = st.multiselect(
            "Ch·ªçn ch·ªâ s·ªë t√†i ch√≠nh:",
            numeric_columns,
            default=numeric_columns[:5] if len(numeric_columns) > 5 else numeric_columns
        )
        
        # Ch·ªçn ch·ª©c nƒÉng
        function = st.selectbox(
            "Ch·ªçn ch·ª©c nƒÉng:",
            ["üìä Dashboard", "üìà Ph√¢n t√≠ch", "üîç So s√°nh", "üìã Th·ªëng k√™"]
        )
    
    # Hi·ªÉn th·ªã ch·ª©c nƒÉng ƒë∆∞·ª£c ch·ªçn
    if function == "üìä Dashboard":
        show_main_dashboard(df, selected_company, selected_metrics)
    elif function == "üìà Ph√¢n t√≠ch":
        show_analysis(df, selected_company, selected_metrics)
    elif function == "üîç So s√°nh":
        show_comparison(df, selected_metrics)
    elif function == "üìã Th·ªëng k√™":
        show_statistics(df, selected_metrics)

def show_main_dashboard(df, company, metrics):
    """Hi·ªÉn th·ªã dashboard ch√≠nh"""
    st.header("üìä Dashboard T·ªïng Quan")
    
    if company and metrics:
        st.subheader(f"üìà Ph√¢n t√≠ch {company}")
        
        # L·ªçc d·ªØ li·ªáu cho c√¥ng ty ƒë∆∞·ª£c ch·ªçn
        company_data = df[df['Company'] == company]
        
        if not company_data.empty and 'Date' in company_data.columns:
            # Bi·ªÉu ƒë·ªì ch·ªâ s·ªë theo th·ªùi gian
            fig = go.Figure()
            
            for metric in metrics[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 ch·ªâ s·ªë ƒë·∫ßu
                if metric in company_data.columns:
                    fig.add_trace(go.Scatter(
                        x=company_data['Date'],
                        y=company_data[metric],
                        mode='lines+markers',
                        name=metric,
                        line=dict(width=2)
                    ))
            
            fig.update_layout(
                title=f'Ch·ªâ s·ªë t√†i ch√≠nh {company} theo th·ªùi gian',
                xaxis_title='Th·ªùi gian',
                yaxis_title='Gi√° tr·ªã',
                height=500,
                template='plotly_white'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # B·∫£ng d·ªØ li·ªáu
            st.subheader("üìã D·ªØ li·ªáu chi ti·∫øt")
            display_data = company_data[['Date'] + metrics[:5]].tail(10)
            st.dataframe(display_data, use_container_width=True)

def show_analysis(df, company, metrics):
    """Hi·ªÉn th·ªã ph√¢n t√≠ch"""
    st.header("üìà Ph√¢n t√≠ch Chi ti·∫øt")
    
    if company and metrics:
        company_data = df[df['Company'] == company]
        
        if not company_data.empty:
            # Ph√¢n t√≠ch xu h∆∞·ªõng
            st.subheader("üìä Ph√¢n t√≠ch xu h∆∞·ªõng")
            
            trend_data = []
            for metric in metrics[:3]:
                if metric in company_data.columns:
                    values = company_data[metric].dropna()
                    if len(values) > 1:
                        # T√≠nh to√°n xu h∆∞·ªõng
                        x = np.arange(len(values))
                        slope, intercept = np.polyfit(x, values, 1)
                        trend_direction = "üìà TƒÉng" if slope > 0 else "üìâ Gi·∫£m"
                        
                        trend_data.append({
                            'Ch·ªâ s·ªë': metric,
                            'Xu h∆∞·ªõng': trend_direction,
                            'ƒê·ªô d·ªëc': f"{slope:.4f}",
                            'Gi√° tr·ªã ƒë·∫ßu': f"{values.iloc[0]:.2f}",
                            'Gi√° tr·ªã cu·ªëi': f"{values.iloc[-1]:.2f}",
                            'Thay ƒë·ªïi (%)': f"{((values.iloc[-1] - values.iloc[0]) / values.iloc[0] * 100):.2f}%"
                        })
            
            if trend_data:
                trend_df = pd.DataFrame(trend_data)
                st.dataframe(trend_df, use_container_width=True)
            
            # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch
            if len(metrics) >= 2:
                st.subheader("üìä Bi·ªÉu ƒë·ªì ph√¢n t√≠ch")
                
                fig = make_subplots(
                    rows=2, cols=2,
                    subplot_titles=['Ph√¢n t√≠ch xu h∆∞·ªõng', 'Ph√¢n b·ªë gi√° tr·ªã', 'T∆∞∆°ng quan', 'So s√°nh qu√Ω']
                )
                
                # Bi·ªÉu ƒë·ªì 1: Xu h∆∞·ªõng
                if 'Date' in company_data.columns and len(metrics) > 0:
                    fig.add_trace(
                        go.Scatter(
                            x=company_data['Date'],
                            y=company_data[metrics[0]],
                            mode='lines+markers',
                            name=metrics[0]
                        ),
                        row=1, col=1
                    )
                
                # Bi·ªÉu ƒë·ªì 2: Histogram
                if len(metrics) > 0:
                    fig.add_trace(
                        go.Histogram(
                            x=company_data[metrics[0]],
                            name=metrics[0]
                        ),
                        row=1, col=2
                    )
                
                # Bi·ªÉu ƒë·ªì 3: Scatter plot
                if len(metrics) >= 2:
                    fig.add_trace(
                        go.Scatter(
                            x=company_data[metrics[0]],
                            y=company_data[metrics[1]],
                            mode='markers',
                            name=f'{metrics[0]} vs {metrics[1]}'
                        ),
                        row=2, col=1
                    )
                
                # Bi·ªÉu ƒë·ªì 4: Box plot
                if len(metrics) > 0:
                    fig.add_trace(
                        go.Box(
                            y=company_data[metrics[0]],
                            name=metrics[0]
                        ),
                        row=2, col=2
                    )
                
                fig.update_layout(height=600, showlegend=False)
                st.plotly_chart(fig, use_container_width=True)

def show_comparison(df, metrics):
    """Hi·ªÉn th·ªã so s√°nh"""
    st.header("üîç So s√°nh Gi·ªØa C√°c C√¥ng Ty")
    
    if metrics:
        # So s√°nh ch·ªâ s·ªë gi·ªØa c√°c c√¥ng ty
        st.subheader("üìä So s√°nh ch·ªâ s·ªë t√†i ch√≠nh")
        
        companies = df['Company'].unique()
        
        # L·∫•y gi√° tr·ªã m·ªõi nh·∫•t c·ªßa m·ªói c√¥ng ty
        latest_data = []
        for company in companies:
            company_data = df[df['Company'] == company]
            if not company_data.empty:
                latest_row = company_data.iloc[-1]
                row_data = {'Company': company}
                for metric in metrics[:5]:  # Ch·ªâ so s√°nh 5 ch·ªâ s·ªë ƒë·∫ßu
                    if metric in latest_row:
                        row_data[metric] = latest_row[metric]
                latest_data.append(row_data)
        
        if latest_data:
            comparison_df = pd.DataFrame(latest_data)
            st.dataframe(comparison_df, use_container_width=True)
            
            # Bi·ªÉu ƒë·ªì so s√°nh
            if len(metrics) > 0:
                fig = go.Figure()
                
                for metric in metrics[:3]:
                    fig.add_trace(go.Bar(
                        x=comparison_df['Company'],
                        y=comparison_df[metric],
                        name=metric,
                        text=comparison_df[metric].round(2),
                        textposition='auto'
                    ))
                
                fig.update_layout(
                    title='So s√°nh ch·ªâ s·ªë t√†i ch√≠nh gi·ªØa c√°c c√¥ng ty',
                    barmode='group',
                    height=500,
                    template='plotly_white'
                )
                
                st.plotly_chart(fig, use_container_width=True)

def show_statistics(df, metrics):
    """Hi·ªÉn th·ªã th·ªëng k√™"""
    st.header("üìã Th·ªëng k√™ M√¥ t·∫£")
    
    if metrics:
        # Th·ªëng k√™ m√¥ t·∫£
        st.subheader("üìä Th·ªëng k√™ c√°c ch·ªâ s·ªë t√†i ch√≠nh")
        
        stats_df = df[metrics].describe()
        st.dataframe(stats_df, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë
        st.subheader("üìà Ph√¢n b·ªë c√°c ch·ªâ s·ªë")
        
        if len(metrics) > 0:
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=[f'Ph√¢n b·ªë {metric}' for metric in metrics[:4]]
            )
            
            for i, metric in enumerate(metrics[:4]):
                row = (i // 2) + 1
                col = (i % 2) + 1
                
                fig.add_trace(
                    go.Histogram(
                        x=df[metric],
                        name=metric,
                        nbinsx=20
                    ),
                    row=row, col=col
                )
            
            fig.update_layout(height=600, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

def main():
    """H√†m ch√≠nh"""
    st.markdown('<h1 class="main-header">üìä FinSight AI</h1>', unsafe_allow_html=True)
    st.markdown('<h2 style="text-align: center; color: #666;">Qu·∫£n L√Ω v√† D·ª± B√°o T√†i Ch√≠nh Doanh Nghi·ªáp</h2>', unsafe_allow_html=True)
    
    # T·∫£i d·ªØ li·ªáu
    df = load_data()
    
    if df is not None:
        show_dashboard(df)
    else:
        st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        
        # H∆∞·ªõng d·∫´n t·∫°o d·ªØ li·ªáu m·∫´u
        st.info("üí° ƒê·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u, ch·∫°y l·ªánh: `python create_sample_data.py`")

if __name__ == "__main__":
    main()
