"""
Script test hu·∫•n luy·ªán m√¥ h√¨nh
"""

import pandas as pd
import numpy as np
import sys
sys.path.append('src')

def test_training():
    """Test hu·∫•n luy·ªán m√¥ h√¨nh"""
    
    # T·∫£i d·ªØ li·ªáu
    try:
        df = pd.read_csv('data/processed/financial_statements_processed.csv')
        print(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu: {df.shape}")
    except Exception as e:
        print(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu: {e}")
        return
    
    # Ki·ªÉm tra d·ªØ li·ªáu
    print("\nüìä Th√¥ng tin d·ªØ li·ªáu:")
    print(f"S·ªë h√†ng: {len(df)}")
    print(f"S·ªë c·ªôt: {len(df.columns)}")
    
    # Ki·ªÉm tra d·ªØ li·ªáu thi·∫øu
    missing_data = df.isnull().sum()
    print(f"\nD·ªØ li·ªáu thi·∫øu: {missing_data.sum()} gi√° tr·ªã")
    
    # Ki·ªÉm tra d·ªØ li·ªáu v√¥ h·∫°n
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    inf_count = np.isinf(df[numeric_cols]).sum().sum()
    print(f"D·ªØ li·ªáu v√¥ h·∫°n: {inf_count} gi√° tr·ªã")
    
    # L√†m s·∫°ch d·ªØ li·ªáu
    df_clean = df.copy()
    
    # X·ª≠ l√Ω d·ªØ li·ªáu v√¥ h·∫°n
    df_clean = df_clean.replace([np.inf, -np.inf], np.nan)
    
    # X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu - ch·ªâ cho c√°c c·ªôt s·ªë
    numeric_cols = df_clean.select_dtypes(include=[np.number]).columns
    df_clean[numeric_cols] = df_clean[numeric_cols].fillna(df_clean[numeric_cols].median())
    
    # X·ª≠ l√Ω c·ªôt kh√¥ng ph·∫£i s·ªë
    non_numeric_cols = df_clean.select_dtypes(exclude=[np.number]).columns
    for col in non_numeric_cols:
        df_clean[col] = df_clean[col].fillna('Unknown')
    
    print(f"\n‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch")
    
    # Test hu·∫•n luy·ªán
    try:
        from model_training import FinancialModelTrainer
        
        trainer = FinancialModelTrainer()
        
        # Ch·ªçn target variable
        target_cols = ['Net_Income', 'ROE', 'ROA', 'Revenue']
        available_targets = [col for col in target_cols if col in df_clean.columns]
        
        if not available_targets:
            print("‚ùå Kh√¥ng t√¨m th·∫•y target variable ph√π h·ª£p")
            return
        
        target = available_targets[0]
        print(f"\nüéØ S·ª≠ d·ª•ng target: {target}")
        
        # Hu·∫•n luy·ªán m√¥ h√¨nh
        print("\nüöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán...")
        results = trainer.train_all_models(df_clean, target)
        
        if results:
            print(f"\n‚úÖ Hu·∫•n luy·ªán th√†nh c√¥ng! {len(results)} m√¥ h√¨nh")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            print("\nüìä K·∫øt qu·∫£ hu·∫•n luy·ªán:")
            for name, result in results.items():
                print(f"{name}: R¬≤ = {result['r2']:.4f}, MSE = {result['mse']:.4f}")
        else:
            print("‚ùå Kh√¥ng c√≥ m√¥ h√¨nh n√†o ƒë∆∞·ª£c hu·∫•n luy·ªán th√†nh c√¥ng")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi hu·∫•n luy·ªán: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_training()
