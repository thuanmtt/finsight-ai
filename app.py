"""
·ª®ng d·ª•ng AI Qu·∫£n L√Ω v√† D·ª± B√°o T√†i Ch√≠nh Doanh Nghi·ªáp
Giao di·ªán Streamlit
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import os
import sys
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# C·∫•u h√¨nh trang - PH·∫¢I ƒê·ª®NG ƒê·∫¶U TI√äN
st.set_page_config(
    page_title="FinSight AI - Qu·∫£n L√Ω v√† D·ª± B√°o T√†i Ch√≠nh",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Th√™m th∆∞ m·ª•c src v√†o path
sys.path.append('src')

# Import c√°c module t·ª± t·∫°o
try:
    from data_processing import FinancialDataProcessor
    DATA_PROCESSING_AVAILABLE = True
except ImportError:
    DATA_PROCESSING_AVAILABLE = False
    st.warning("Module data_processing kh√¥ng kh·∫£ d·ª•ng")

try:
    from feature_engineering import FinancialFeatureEngineer
    FEATURE_ENGINEERING_AVAILABLE = True
except ImportError:
    FEATURE_ENGINEERING_AVAILABLE = False
    st.warning("Module feature_engineering kh√¥ng kh·∫£ d·ª•ng")

try:
    from model_training import FinancialModelTrainer
    MODEL_TRAINING_AVAILABLE = True
except ImportError:
    MODEL_TRAINING_AVAILABLE = False
    st.warning("Module model_training kh√¥ng kh·∫£ d·ª•ng")

try:
    from prediction import FinancialPredictor
    PREDICTION_AVAILABLE = True
except ImportError:
    PREDICTION_AVAILABLE = False
    st.warning("Module prediction kh√¥ng kh·∫£ d·ª•ng")

try:
    from visualization import FinancialVisualizer
    VISUALIZATION_AVAILABLE = True
except ImportError:
    VISUALIZATION_AVAILABLE = False
    st.warning("Module visualization kh√¥ng kh·∫£ d·ª•ng")

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .success-card {
        border-left-color: #2ca02c;
    }
    .warning-card {
        border-left-color: #ff7f0e;
    }
    .danger-card {
        border-left-color: #d62728;
    }
</style>
""", unsafe_allow_html=True)

class FinSightApp:
    """L·ªõp ·ª©ng d·ª•ng ch√≠nh FinSight AI"""
    
    def __init__(self):
        # Kh·ªüi t·∫°o c√°c module n·∫øu c√≥ s·∫µn
        self.data_processor = None
        self.feature_engineer = None
        self.model_trainer = None
        self.predictor = None
        self.visualizer = None
        
        if DATA_PROCESSING_AVAILABLE:
            self.data_processor = FinancialDataProcessor()
        
        if FEATURE_ENGINEERING_AVAILABLE:
            self.feature_engineer = FinancialFeatureEngineer()
        
        if MODEL_TRAINING_AVAILABLE:
            self.model_trainer = FinancialModelTrainer()
        
        if PREDICTION_AVAILABLE:
            self.predictor = FinancialPredictor()
        
        if VISUALIZATION_AVAILABLE:
            self.visualizer = FinancialVisualizer()
        
        self.data = None
        self.processed_data = None
        
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu"""
        try:
            # Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
            processed_files = [f for f in os.listdir('data/processed') 
                             if f.endswith('_processed.csv')]
            
            if processed_files:
                # T·∫£i d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
                file_path = os.path.join('data/processed', processed_files[0])
                self.processed_data = pd.read_csv(file_path)
                st.success(f"ƒê√£ t·∫£i d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω: {len(self.processed_data)} b·∫£n ghi")
            else:
                # T·∫£i d·ªØ li·ªáu th√¥
                raw_files = [f for f in os.listdir('data/raw') if f.endswith('.csv')]
                if raw_files:
                    file_path = os.path.join('data/raw', raw_files[0])
                    self.data = pd.read_csv(file_path)
                    st.info(f"ƒê√£ t·∫£i d·ªØ li·ªáu th√¥: {len(self.data)} b·∫£n ghi")
                else:
                    st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu. Vui l√≤ng t·∫£i d·ªØ li·ªáu t·ª´ Kaggle tr∆∞·ªõc.")
                    return False
            return True
        except Exception as e:
            st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
            return False
    
    def show_dashboard(self):
        """Hi·ªÉn th·ªã dashboard ch√≠nh"""
        st.markdown('<h1 class="main-header">üìä FinSight AI</h1>', unsafe_allow_html=True)
        st.markdown('<h2 style="text-align: center; color: #666;">Qu·∫£n L√Ω v√† D·ª± B√°o T√†i Ch√≠nh Doanh Nghi·ªáp</h2>', unsafe_allow_html=True)
        
        # T·∫£i d·ªØ li·ªáu
        if not self.load_data():
            return
        
        # Sidebar
        with st.sidebar:
            st.header("üéõÔ∏è ƒêi·ªÅu khi·ªÉn")
            
            # Ch·ªçn ch·ª©c nƒÉng
            function = st.selectbox(
                "Ch·ªçn ch·ª©c nƒÉng:",
                ["üìä Dashboard", "ü§ñ Hu·∫•n luy·ªán AI", "üîÆ D·ª± ƒëo√°n", "üìà Ph√¢n t√≠ch", "‚öôÔ∏è C√†i ƒë·∫∑t"]
            )
            
            # Ch·ªçn c√¥ng ty n·∫øu c√≥ d·ªØ li·ªáu
            if self.processed_data is not None and 'Company' in self.processed_data.columns:
                companies = self.processed_data['Company'].unique()
                selected_company = st.selectbox("Ch·ªçn c√¥ng ty:", companies)
            else:
                selected_company = None
            
            # Ch·ªçn ch·ªâ s·ªë
            if self.processed_data is not None:
                numeric_columns = self.processed_data.select_dtypes(include=[np.number]).columns.tolist()
                selected_metrics = st.multiselect(
                    "Ch·ªçn ch·ªâ s·ªë t√†i ch√≠nh:",
                    numeric_columns,
                    default=numeric_columns[:5] if len(numeric_columns) > 5 else numeric_columns
                )
            else:
                selected_metrics = []
        
        # Hi·ªÉn th·ªã ch·ª©c nƒÉng ƒë∆∞·ª£c ch·ªçn
        if function == "üìä Dashboard":
            self.show_main_dashboard(selected_company, selected_metrics)
        elif function == "ü§ñ Hu·∫•n luy·ªán AI":
            self.show_training_page()
        elif function == "üîÆ D·ª± ƒëo√°n":
            self.show_prediction_page(selected_company)
        elif function == "üìà Ph√¢n t√≠ch":
            self.show_analysis_page(selected_company, selected_metrics)
        elif function == "‚öôÔ∏è C√†i ƒë·∫∑t":
            self.show_settings_page()
    
    def show_main_dashboard(self, company, metrics):
        """Hi·ªÉn th·ªã dashboard ch√≠nh"""
        st.header("üìä Dashboard T·ªïng Quan")
        
        if self.processed_data is None:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
            return
        
        # Th·ªëng k√™ t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("T·ªïng s·ªë c√¥ng ty", len(self.processed_data['Company'].unique()))
        
        with col2:
            st.metric("T·ªïng s·ªë b·∫£n ghi", len(self.processed_data))
        
        with col3:
            if 'Date' in self.processed_data.columns:
                date_range = f"{self.processed_data['Date'].min()} - {self.processed_data['Date'].max()}"
                st.metric("Kho·∫£ng th·ªùi gian", date_range)
        
        with col4:
            if metrics:
                st.metric("S·ªë ch·ªâ s·ªë", len(metrics))
        
        # Bi·ªÉu ƒë·ªì ch√≠nh
        if company and metrics:
            st.subheader(f"üìà Ph√¢n t√≠ch {company}")
            
            # T·∫°o bi·ªÉu ƒë·ªì ch·ªâ s·ªë theo th·ªùi gian
            company_data = self.processed_data[self.processed_data['Company'] == company]
            
            if not company_data.empty and 'Date' in company_data.columns:
                if self.visualizer is not None:
                    try:
                        fig = self.visualizer.plot_financial_metrics_over_time(
                            company_data, metrics[:3]  # Ch·ªâ hi·ªÉn th·ªã 3 ch·ªâ s·ªë ƒë·∫ßu
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")
                else:
                    # T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n n·∫øu kh√¥ng c√≥ visualizer
                    import plotly.graph_objects as go
                    fig = go.Figure()
                    for metric in metrics[:3]:
                        if metric in company_data.columns:
                            fig.add_trace(go.Scatter(
                                x=company_data['Date'],
                                y=company_data[metric],
                                mode='lines+markers',
                                name=metric
                            ))
                    fig.update_layout(
                        title=f'Ch·ªâ s·ªë t√†i ch√≠nh {company}',
                        xaxis_title='Th·ªùi gian',
                        yaxis_title='Gi√° tr·ªã'
                    )
                    st.plotly_chart(fig, use_container_width=True)
            
            # Dashboard t√†i ch√≠nh
            if len(metrics) >= 2 and self.visualizer is not None:
                try:
                    dashboard_fig = self.visualizer.plot_financial_dashboard(
                        company_data, company, metrics[:2]
                    )
                    st.plotly_chart(dashboard_fig, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o dashboard: {str(e)}")
        
        # Ma tr·∫≠n t∆∞∆°ng quan
        if len(metrics) > 1:
            st.subheader("üîó Ma tr·∫≠n t∆∞∆°ng quan")
            if self.visualizer is not None:
                try:
                    corr_fig = self.visualizer.plot_correlation_matrix(
                        self.processed_data, metrics
                    )
                    st.plotly_chart(corr_fig, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o ma tr·∫≠n t∆∞∆°ng quan: {str(e)}")
            else:
                # T·∫°o ma tr·∫≠n t∆∞∆°ng quan ƒë∆°n gi·∫£n
                import plotly.graph_objects as go
                import numpy as np
                
                corr_matrix = self.processed_data[metrics].corr()
                fig = go.Figure(data=go.Heatmap(
                    z=corr_matrix.values,
                    x=corr_matrix.columns,
                    y=corr_matrix.columns,
                    colorscale='RdBu',
                    zmid=0
                ))
                fig.update_layout(title='Ma tr·∫≠n t∆∞∆°ng quan')
                st.plotly_chart(fig, use_container_width=True)
    
    def show_training_page(self):
        """Hi·ªÉn th·ªã trang hu·∫•n luy·ªán AI"""
        st.header("ü§ñ Hu·∫•n luy·ªán M√¥ h√¨nh AI")
        
        if self.processed_data is None:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán. Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.")
            return
        
        # Ch·ªçn target variable
        numeric_columns = self.processed_data.select_dtypes(include=[np.number]).columns.tolist()
        target_variable = st.selectbox("Ch·ªçn bi·∫øn m·ª•c ti√™u:", numeric_columns)
        
        # Ch·ªçn lo·∫°i m√¥ h√¨nh
        model_types = st.multiselect(
            "Ch·ªçn lo·∫°i m√¥ h√¨nh:",
            ["Linear Models", "Ensemble Models", "Neural Network", "LSTM"],
            default=["Linear Models", "Ensemble Models"]
        )
        
        # N√∫t hu·∫•n luy·ªán
        if st.button("üöÄ B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán", type="primary"):
            with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                try:
                    # X·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc khi training
                    st.info("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")
                    
                    # L√†m s·∫°ch d·ªØ li·ªáu
                    df_clean = self.processed_data.copy()
                    
                    # X·ª≠ l√Ω c√°c gi√° tr·ªã v√¥ c√πng v√† NaN
                    numeric_cols = df_clean.select_dtypes(include=[np.number]).columns
                    for col in numeric_cols:
                        # Thay th·∫ø infinity b·∫±ng NaN
                        df_clean[col] = df_clean[col].replace([np.inf, -np.inf], np.nan)
                        # Thay th·∫ø NaN b·∫±ng median
                        df_clean[col] = df_clean[col].fillna(df_clean[col].median())
                    
                    # X·ª≠ l√Ω c√°c c·ªôt kh√¥ng ph·∫£i s·ªë
                    non_numeric_cols = df_clean.select_dtypes(exclude=[np.number]).columns
                    for col in non_numeric_cols:
                        df_clean[col] = df_clean[col].fillna('Unknown')
                    
                    # Lo·∫°i b·ªè c√°c h√†ng c√≥ target variable l√† NaN
                    df_clean = df_clean.dropna(subset=[target_variable])
                    
                    st.info(f"D·ªØ li·ªáu sau khi l√†m s·∫°ch: {len(df_clean)} h√†ng")
                    
                    # T·∫°o features
                    st.info("ƒêang t·∫°o t√≠nh nƒÉng...")
                    if self.feature_engineer is not None:
                        df_features = self.feature_engineer.create_all_features(
                            df_clean, target_variable
                        )
                        # L·∫•y feature names t·ª´ feature engineer
                        feature_names = getattr(self.feature_engineer, 'feature_names', None)
                    else:
                        # N·∫øu kh√¥ng c√≥ feature engineer, s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l√†m s·∫°ch
                        df_features = df_clean
                        feature_names = None
                    
                    # Hu·∫•n luy·ªán m√¥ h√¨nh
                    st.info("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
                    if self.model_trainer is not None:
                        results = self.model_trainer.train_all_models(df_features, target_variable, feature_names)
                    else:
                        st.error("Model trainer kh√¥ng kh·∫£ d·ª•ng")
                        return
                    
                    # L∆∞u m√¥ h√¨nh
                    if self.model_trainer is not None:
                        self.model_trainer.save_models()
                    
                    st.success("‚úÖ Hu·∫•n luy·ªán ho√†n th√†nh!")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.subheader("üìä K·∫øt qu·∫£ hu·∫•n luy·ªán")
                    
                    # B·∫£ng k·∫øt qu·∫£
                    results_df = pd.DataFrame([
                        {
                            'M√¥ h√¨nh': name,
                            'R¬≤ Score': f"{result['r2']:.4f}",
                            'MSE': f"{result['mse']:.4f}",
                            'MAE': f"{result['mae']:.4f}"
                        }
                        for name, result in results.items()
                    ])
                    
                    st.dataframe(results_df, use_container_width=True)
                    
                    # Bi·ªÉu ƒë·ªì so s√°nh hi·ªáu su·∫•t
                    model_scores = {name: result['r2'] for name, result in results.items()}
                    if self.visualizer is not None:
                        try:
                            perf_fig = self.visualizer.plot_model_performance_comparison(model_scores)
                            st.plotly_chart(perf_fig, use_container_width=True)
                        except Exception as e:
                            st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì hi·ªáu su·∫•t: {str(e)}")
                    else:
                        # T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n
                        import plotly.graph_objects as go
                        fig = go.Figure(data=[
                            go.Bar(x=list(model_scores.keys()), y=list(model_scores.values()))
                        ])
                        fig.update_layout(title='So s√°nh hi·ªáu su·∫•t c√°c m√¥ h√¨nh')
                        st.plotly_chart(fig, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh hu·∫•n luy·ªán: {str(e)}")
    
    def show_prediction_page(self, company):
        """Hi·ªÉn th·ªã trang d·ª± ƒëo√°n"""
        st.header("üîÆ D·ª± ƒëo√°n T√†i ch√≠nh")
        
        # Ki·ªÉm tra m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
        if not os.path.exists('models/model_info.joblib'):
            st.warning("Ch∆∞a c√≥ m√¥ h√¨nh ƒë∆∞·ª£c hu·∫•n luy·ªán. Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")
            return
        
        # T·∫£i l·∫°i predictor
        self.predictor = FinancialPredictor()
        
        if not self.predictor.models:
            st.error("Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return
        
        # Ch·ªçn lo·∫°i d·ª± ƒëo√°n
        prediction_type = st.selectbox(
            "Ch·ªçn lo·∫°i d·ª± ƒëo√°n:",
            ["D·ª± ƒëo√°n ch·ªâ s·ªë t√†i ch√≠nh", "D·ª± ƒëo√°n gi√° c·ªï phi·∫øu", "Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞"]
        )
        
        if prediction_type == "D·ª± ƒëo√°n ch·ªâ s·ªë t√†i ch√≠nh":
            self.show_financial_metrics_prediction(company)
        elif prediction_type == "D·ª± ƒëo√°n gi√° c·ªï phi·∫øu":
            self.show_stock_price_prediction(company)
        elif prediction_type == "Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞":
            self.show_investment_recommendation(company)
    
    def show_financial_metrics_prediction(self, company):
        """Hi·ªÉn th·ªã d·ª± ƒëo√°n ch·ªâ s·ªë t√†i ch√≠nh"""
        st.subheader("üìä D·ª± ƒëo√°n ch·ªâ s·ªë t√†i ch√≠nh")
        
        if self.processed_data is None:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n")
            return
        
        # Ch·ªçn c√¥ng ty
        if company is None:
            companies = self.processed_data['Company'].unique()
            company = st.selectbox("Ch·ªçn c√¥ng ty:", companies)
        
        # Ch·ªçn ch·ªâ s·ªë c·∫ßn d·ª± ƒëo√°n
        numeric_columns = self.processed_data.select_dtypes(include=[np.number]).columns.tolist()
        target_metrics = st.multiselect(
            "Ch·ªçn ch·ªâ s·ªë c·∫ßn d·ª± ƒëo√°n:",
            numeric_columns,
            default=numeric_columns[:3]
        )
        
        if st.button("üîÆ Th·ª±c hi·ªán d·ª± ƒëo√°n", type="primary"):
            with st.spinner("ƒêang th·ª±c hi·ªán d·ª± ƒëo√°n..."):
                try:
                    # L·∫•y d·ªØ li·ªáu c√¥ng ty
                    company_data = self.processed_data[self.processed_data['Company'] == company]
                    
                    if company_data.empty:
                        st.error(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho c√¥ng ty {company}")
                        return
                    
                    # Th·ª±c hi·ªán d·ª± ƒëo√°n
                    predictions = self.predictor.predict_financial_metrics(
                        company_data, target_metrics
                    )
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success("‚úÖ D·ª± ƒëo√°n ho√†n th√†nh!")
                    
                    # T·∫°o b·∫£ng k·∫øt qu·∫£
                    results_data = []
                    for metric, result in predictions.items():
                        if result['predicted_value'] is not None:
                            results_data.append({
                                'Ch·ªâ s·ªë': metric,
                                'Gi√° tr·ªã d·ª± ƒëo√°n': f"{result['predicted_value']:.2f}",
                                'ƒê·ªô tin c·∫≠y': f"{result['confidence']:.2f}",
                                'M√¥ h√¨nh': result['model_used']
                            })
                    
                    if results_data:
                        results_df = pd.DataFrame(results_data)
                        st.dataframe(results_df, use_container_width=True)
                        
                        # Bi·ªÉu ƒë·ªì so s√°nh
                        metrics = [r['Ch·ªâ s·ªë'] for r in results_data]
                        values = [float(r['Gi√° tr·ªã d·ª± ƒëo√°n']) for r in results_data]
                        
                        fig = go.Figure(data=[
                            go.Bar(x=metrics, y=values, marker_color='lightblue')
                        ])
                        fig.update_layout(
                            title="K·∫øt qu·∫£ d·ª± ƒëo√°n c√°c ch·ªâ s·ªë t√†i ch√≠nh",
                            xaxis_title="Ch·ªâ s·ªë",
                            yaxis_title="Gi√° tr·ªã d·ª± ƒëo√°n"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o th√†nh c√¥ng")
                        
                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {str(e)}")
    
    def show_stock_price_prediction(self, company):
        """Hi·ªÉn th·ªã d·ª± ƒëo√°n gi√° c·ªï phi·∫øu"""
        st.subheader("üìà D·ª± ƒëo√°n gi√° c·ªï phi·∫øu")
        
        # S·ªë ng√†y d·ª± ƒëo√°n
        days_ahead = st.slider("S·ªë ng√†y d·ª± ƒëo√°n:", 7, 90, 30)
        
        if st.button("üîÆ D·ª± ƒëo√°n gi√° c·ªï phi·∫øu", type="primary"):
            with st.spinner("ƒêang d·ª± ƒëo√°n gi√° c·ªï phi·∫øu..."):
                try:
                    # T·∫°o d·ªØ li·ªáu m·∫´u cho demo
                    sample_data = pd.DataFrame({
                        'Revenue': [5000],
                        'Total_Assets': [15000],
                        'Total_Equity': [8000],
                        'Net_Income': [500],
                        'ROE': [0.15],
                        'ROA': [0.08],
                        'Current_Ratio': [2.5],
                        'Debt_Ratio': [0.4],
                        'Close': [150]  # Gi√° c·ªï phi·∫øu hi·ªán t·∫°i
                    })
                    
                    # Th·ª±c hi·ªán d·ª± ƒëo√°n
                    prediction = self.predictor.predict_stock_price(sample_data, days_ahead)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success("‚úÖ D·ª± ƒëo√°n gi√° c·ªï phi·∫øu ho√†n th√†nh!")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "Gi√° hi·ªán t·∫°i d·ª± ƒëo√°n",
                            f"${prediction['current_price_prediction']:.2f}"
                        )
                    
                    with col2:
                        st.metric(
                            "Xu h∆∞·ªõng",
                            prediction['trend'].title()
                        )
                    
                    with col3:
                        st.metric(
                            "ƒê·ªô tin c·∫≠y",
                            f"{prediction['confidence']:.2f}"
                        )
                    
                    # Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n
                    dates = pd.date_range(
                        start=datetime.now(),
                        periods=days_ahead + 1,
                        freq='D'
                    )
                    
                    fig = go.Figure()
                    
                    # Gi√° hi·ªán t·∫°i
                    fig.add_trace(go.Scatter(
                        x=[dates[0]],
                        y=[prediction['current_price_prediction']],
                        mode='markers',
                        name='Gi√° hi·ªán t·∫°i',
                        marker=dict(size=10, color='blue')
                    ))
                    
                    # Gi√° t∆∞∆°ng lai
                    fig.add_trace(go.Scatter(
                        x=dates[1:],
                        y=prediction['future_prices'],
                        mode='lines+markers',
                        name='D·ª± ƒëo√°n',
                        line=dict(color='red', dash='dash')
                    ))
                    
                    fig.update_layout(
                        title=f"D·ª± ƒëo√°n gi√° c·ªï phi·∫øu {company} trong {days_ahead} ng√†y t·ªõi",
                        xaxis_title="Th·ªùi gian",
                        yaxis_title="Gi√° c·ªï phi·∫øu ($)",
                        template='plotly_white'
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {str(e)}")
    
    def show_investment_recommendation(self, company):
        """Hi·ªÉn th·ªã khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞"""
        st.subheader("üí° Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞")
        
        if st.button("üéØ T·∫°o khuy·∫øn ngh·ªã", type="primary"):
            with st.spinner("ƒêang ph√¢n t√≠ch v√† t·∫°o khuy·∫øn ngh·ªã..."):
                try:
                    # T·∫°o d·ªØ li·ªáu m·∫´u cho demo
                    sample_predictions = {
                        'ROE': {'predicted_value': 0.18},
                        'Current_Ratio': {'predicted_value': 2.2},
                        'ROA': {'predicted_value': 0.12}
                    }
                    
                    # T·∫°o khuy·∫øn ngh·ªã
                    recommendation = self.predictor.generate_investment_recommendation(
                        sample_predictions
                    )
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success("‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!")
                    
                    # Card khuy·∫øn ngh·ªã
                    action_color = {
                        'buy': 'success',
                        'sell': 'danger',
                        'hold': 'warning'
                    }.get(recommendation['action'], 'info')
                    
                    st.markdown(f"""
                    <div class="metric-card {action_color}-card">
                        <h3>Khuy·∫øn ngh·ªã: {recommendation['action'].upper()}</h3>
                        <p><strong>ƒê·ªô tin c·∫≠y:</strong> {recommendation['confidence']:.2f}</p>
                        <p><strong>M·ª©c ƒë·ªô r·ªßi ro:</strong> {recommendation['risk_level']}</p>
                        <p><strong>L√Ω do:</strong> {', '.join(recommendation['reasoning'])}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Bi·ªÉu ƒë·ªì radar cho ph√¢n t√≠ch
                    if recommendation['reasoning']:
                        categories = ['ROE', 'ROA', 'Liquidity', 'Growth', 'Risk']
                        values = [0.8, 0.7, 0.6, 0.5, 0.4]  # Gi√° tr·ªã m·∫´u
                        
                        fig = go.Figure()
                        fig.add_trace(go.Scatterpolar(
                            r=values,
                            theta=categories,
                            fill='toself',
                            name='ƒêi·ªÉm ƒë√°nh gi√°'
                        ))
                        
                        fig.update_layout(
                            polar=dict(
                                radialaxis=dict(
                                    visible=True,
                                    range=[0, 1]
                                )),
                            showlegend=False,
                            title="Ph√¢n t√≠ch ƒëa chi·ªÅu"
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch: {str(e)}")
    
    def show_analysis_page(self, company, metrics):
        """Hi·ªÉn th·ªã trang ph√¢n t√≠ch"""
        st.header("üìà Ph√¢n t√≠ch Chi ti·∫øt")
        
        if self.processed_data is None:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch")
            return
        
        # Ch·ªçn lo·∫°i ph√¢n t√≠ch
        analysis_type = st.selectbox(
            "Ch·ªçn lo·∫°i ph√¢n t√≠ch:",
            ["Ph√¢n t√≠ch xu h∆∞·ªõng", "Ph√¢n t√≠ch r·ªßi ro", "So s√°nh ng√†nh", "Th·ªëng k√™ m√¥ t·∫£"]
        )
        
        if analysis_type == "Ph√¢n t√≠ch xu h∆∞·ªõng":
            self.show_trend_analysis(company, metrics)
        elif analysis_type == "Ph√¢n t√≠ch r·ªßi ro":
            self.show_risk_analysis(company, metrics)
        elif analysis_type == "So s√°nh ng√†nh":
            self.show_industry_comparison(company, metrics)
        elif analysis_type == "Th·ªëng k√™ m√¥ t·∫£":
            self.show_descriptive_statistics(metrics)
    
    def show_trend_analysis(self, company, metrics):
        """Hi·ªÉn th·ªã ph√¢n t√≠ch xu h∆∞·ªõng"""
        st.subheader("üìà Ph√¢n t√≠ch xu h∆∞·ªõng")
        
        if company and metrics:
            company_data = self.processed_data[self.processed_data['Company'] == company]
            
            if not company_data.empty and 'Date' in company_data.columns:
                # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng
                if self.visualizer is not None:
                    try:
                        fig = self.visualizer.plot_financial_metrics_over_time(
                            company_data, metrics[:3]
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì xu h∆∞·ªõng: {str(e)}")
                else:
                    # T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n
                    import plotly.graph_objects as go
                    fig = go.Figure()
                    for metric in metrics[:3]:
                        if metric in company_data.columns:
                            fig.add_trace(go.Scatter(
                                x=company_data['Date'],
                                y=company_data[metric],
                                mode='lines+markers',
                                name=metric
                            ))
                    fig.update_layout(title='Ph√¢n t√≠ch xu h∆∞·ªõng')
                    st.plotly_chart(fig, use_container_width=True)
                
                # Ph√¢n t√≠ch xu h∆∞·ªõng chi ti·∫øt
                st.subheader("üìä Th·ªëng k√™ xu h∆∞·ªõng")
                
                trend_data = []
                for metric in metrics[:3]:
                    if metric in company_data.columns:
                        values = company_data[metric].dropna()
                        if len(values) > 1:
                            # T√≠nh to√°n xu h∆∞·ªõng
                            x = np.arange(len(values))
                            slope, intercept = np.polyfit(x, values, 1)
                            trend_direction = "TƒÉng" if slope > 0 else "Gi·∫£m"
                            
                            trend_data.append({
                                'Ch·ªâ s·ªë': metric,
                                'Xu h∆∞·ªõng': trend_direction,
                                'ƒê·ªô d·ªëc': f"{slope:.4f}",
                                'Gi√° tr·ªã ƒë·∫ßu': f"{values.iloc[0]:.2f}",
                                'Gi√° tr·ªã cu·ªëi': f"{values.iloc[-1]:.2f}",
                                'Thay ƒë·ªïi (%)': f"{((values.iloc[-1] - values.iloc[0]) / values.iloc[0] * 100):.2f}%"
                            })
                
                if trend_data:
                    trend_df = pd.DataFrame(trend_data)
                    st.dataframe(trend_df, use_container_width=True)
    
    def show_risk_analysis(self, company, metrics):
        """Hi·ªÉn th·ªã ph√¢n t√≠ch r·ªßi ro"""
        st.subheader("‚ö†Ô∏è Ph√¢n t√≠ch r·ªßi ro")
        
        # Ch·ªçn ch·ªâ s·ªë r·ªßi ro
        risk_metrics = st.multiselect(
            "Ch·ªçn ch·ªâ s·ªë r·ªßi ro:",
            metrics,
            default=metrics[:2] if len(metrics) >= 2 else metrics
        )
        
        if risk_metrics:
            if self.visualizer is not None:
                try:
                    fig = self.visualizer.plot_risk_analysis(
                        self.processed_data, risk_metrics
                    )
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì r·ªßi ro: {str(e)}")
            else:
                # T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n
                import plotly.graph_objects as go
                fig = go.Figure(data=[
                    go.Scatter(
                        x=self.processed_data[risk_metrics[0]],
                        y=self.processed_data[risk_metrics[1]] if len(risk_metrics) > 1 else self.processed_data[risk_metrics[0]],
                        mode='markers',
                        text=self.processed_data['Company']
                    )
                ])
                fig.update_layout(title='Ph√¢n t√≠ch r·ªßi ro')
                st.plotly_chart(fig, use_container_width=True)
    
    def show_industry_comparison(self, company, metrics):
        """Hi·ªÉn th·ªã so s√°nh ng√†nh"""
        st.subheader("üè≠ So s√°nh v·ªõi ng√†nh")
        
        if company and metrics:
            if self.visualizer is not None:
                try:
                    fig = self.visualizer.plot_financial_ratios_comparison(
                        self.processed_data, metrics[:3]
                    )
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì so s√°nh: {str(e)}")
            else:
                # T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n
                import plotly.graph_objects as go
                companies = self.processed_data['Company'].unique()
                fig = go.Figure()
                for metric in metrics[:3]:
                    values = []
                    for company in companies:
                        company_data = self.processed_data[self.processed_data['Company'] == company]
                        if not company_data.empty:
                            values.append(company_data[metric].iloc[-1])
                        else:
                            values.append(0)
                    fig.add_trace(go.Bar(x=companies, y=values, name=metric))
                fig.update_layout(title='So s√°nh ch·ªâ s·ªë t√†i ch√≠nh')
                st.plotly_chart(fig, use_container_width=True)
    
    def show_descriptive_statistics(self, metrics):
        """Hi·ªÉn th·ªã th·ªëng k√™ m√¥ t·∫£"""
        st.subheader("üìä Th·ªëng k√™ m√¥ t·∫£")
        
        if metrics:
            if self.visualizer is not None:
                try:
                    fig = self.visualizer.create_summary_statistics_table(
                        self.processed_data, metrics
                    )
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o b·∫£ng th·ªëng k√™: {str(e)}")
            else:
                # T·∫°o b·∫£ng th·ªëng k√™ ƒë∆°n gi·∫£n
                stats_df = self.processed_data[metrics].describe()
                st.dataframe(stats_df, use_container_width=True)
    
    def show_settings_page(self):
        """Hi·ªÉn th·ªã trang c√†i ƒë·∫∑t"""
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        st.subheader("üì• T·∫£i d·ªØ li·ªáu")
        
        if st.button("üì• T·∫£i d·ªØ li·ªáu t·ª´ Kaggle", type="primary"):
            with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Kaggle..."):
                try:
                    # Import v√† ch·∫°y script t·∫£i d·ªØ li·ªáu
                    from data_download import download_kaggle_dataset
                    success = download_kaggle_dataset()
                    
                    if success:
                        st.success("‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
                    else:
                        st.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu")
                except Exception as e:
                    st.error(f"L·ªói: {str(e)}")
        
        st.subheader("üîÑ X·ª≠ l√Ω d·ªØ li·ªáu")
        
        if st.button("üîÑ X·ª≠ l√Ω d·ªØ li·ªáu", type="primary"):
            with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
                try:
                    processed_data = self.data_processor.process_all_data()
                    st.success(f"‚úÖ X·ª≠ l√Ω d·ªØ li·ªáu th√†nh c√¥ng! {len(processed_data)} b·ªô d·ªØ li·ªáu")
                except Exception as e:
                    st.error(f"L·ªói: {str(e)}")
        
        st.subheader("üìä Th√¥ng tin h·ªá th·ªëng")
        
        # Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh
        if os.path.exists('models/model_info.joblib'):
            import joblib
            model_info = joblib.load('models/model_info.joblib')
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("M√¥ h√¨nh t·ªët nh·∫•t", model_info.get('best_model', 'N/A'))
                st.metric("ƒêi·ªÉm R¬≤ t·ªët nh·∫•t", f"{model_info.get('best_score', 0):.4f}")
            
            with col2:
                st.metric("T·ªïng s·ªë m√¥ h√¨nh", model_info.get('total_models', 0))
        else:
            st.info("Ch∆∞a c√≥ m√¥ h√¨nh ƒë∆∞·ª£c hu·∫•n luy·ªán")

def main():
    """H√†m ch√≠nh"""
    app = FinSightApp()
    app.show_dashboard()

if __name__ == "__main__":
    main()
